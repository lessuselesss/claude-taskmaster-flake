name: Automatic Flake Update

on:
  schedule:
    - cron: '0 3 * * *'  # Daily at 03:00 UTC
  workflow_dispatch:

jobs:
  update-flake:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Nix
        uses: cachix/install-nix-action@v27

      - name: Update flake.lock
        run: nix flake update

      - name: Get latest upstream version
        id: get_version
        run: |
          LATEST_VERSION=$(curl -s "https://api.github.com/repos/eyaltoledano/claude-task-master/releases/latest" | jq -r '.tag_name')
          # Remove 'v' prefix if present
          LATEST_VERSION=${LATEST_VERSION#v}
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in flake.nix
        run: |
          CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' flake.nix)
          LATEST_VERSION=${{ steps.get_version.outputs.latest_version }}
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $LATEST_VERSION"
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$LATEST_VERSION\"/g" flake.nix
            git add flake.nix
            git commit -m "chore: update task-master-ai version to $LATEST_VERSION" || true
          else
            echo "Version is already up-to-date: $CURRENT_VERSION"
          fi

      - name: Auto-fix hash mismatches in flake.nix
        shell: bash
        run: |
          set -e

          MAX_ATTEMPTS=5
          attempt=1
          updated=0

          while [ $attempt -le $MAX_ATTEMPTS ]; do
            echo "Build attempt: $attempt"
            # Try to build; capture output and error logs
            if nix build .; then
              echo "Build succeeded!"
              break
            fi

            # Find all hash mismatches in the build error output
            # Nix error pattern: 'got: ... wanted: ...'
            HASH_MISMATCHES=$(grep -rPo 'got:\s*"\K[^"]+' . || true)

            if [ -z "$HASH_MISMATCHES" ]; then
              echo "No more hash mismatches found."
              break
            fi

            for got in $HASH_MISMATCHES; do
              # Find the corresponding 'wanted' hash (look for the pattern close to 'got')
              wanted=$(grep -rPo "wanted:\s*\"\K[^\"']+" . | head -n 1)
              if [ -z "$wanted" ]; then
                echo "Could not find 'wanted' hash for got: $got, skipping."
                continue
              fi
              # Update all occurrences in flake.nix
              sed -i "s/$wanted/$got/g" flake.nix
              echo "Updated hash: $wanted -> $got"
              updated=1
            done

            # Stage and commit if anything changed
            if [ $updated -eq 1 ]; then
              git add flake.nix
              git commit -m "fix: update hash in flake.nix (auto-fix attempt $attempt)" || true
              updated=0
            fi

            attempt=$((attempt+1))
          done

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add flake.lock flake.nix
          if git diff --cached --quiet; then
            echo "No flake update."
            exit 0
          fi
          git commit -m "chore: update flake.lock and fix hash mismatches"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}sk
